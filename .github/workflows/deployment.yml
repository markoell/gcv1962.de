# This is a basic workflow to help you get started with Actions

name: Deploy To Production

# Controls when the action will run. 
on:
  # Manual Trigger
  workflow_dispatch:
    environment:
      description: 'Environment to run [Disabled]'
      type: environment
      required: true
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: 
    - main
    - develop

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
          token: ${{ secrets.CONTENTTOKEN }}
          submodules: 'true'

    - name: Validate composer.json and composer.lock
      run: composer validate
      
    - name: Cache packages
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ./kirby
          ./vendor
          ~/.npm
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
        restore-keys:
          ${{ runner.os }}-

    - name: composer install
      #if: steps.cache.outputs.cache-hit != 'true'  TODO: solve and reenable condition
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12'

    - name: NPM
      run: npm install

    - name: Copy
      run: |
        mkdir -p publish && \
        rsync -av --exclude-from=deployment/online/rsync.ignore --exclude publish . publish/

    - name: Upload result for deploy
      uses: actions/upload-artifact@v2
      with:
        name: publish
        path: |
          publish/*
          deployment/online/blue_green.sh

  pre-deploy:
    runs-on: ubuntu-latest
    name: 'Prepare Deployment'
    needs: build
    env:
      API_HOST: 'https://api.github.com/repos/markoell/gcv1962.de/environments'
    steps:
      - name: 'Set Production Environment'
        run: |
          echo "TARGET_ENV=${API_HOST}/production_environment" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/main' }}
      - name: 'Set Test Environment'
        run: |
          echo "TARGET_ENV=${API_HOST}/staging_environment" >> $GITHUB_ENV
        if: ${{ github.ref == 'refs/heads/develop' }}
  
  deploy:
    name: 'Deployment'
    runs-on: ubuntu-latest
    needs: [build, pre-deploy]
    environment:
      name: production_environment
      url: ${{ env.TARGET_ENV }}

    env:
      REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      REMOTE_USER: ${{ secrets.REMOTE_USER }}
      REMOTE_TARGET: ${{ secrets.REMOTE_TARGET }}

    steps:
    - name: Download result from build
      uses: actions/download-artifact@v2
      with:
        name: publish
        path: publish

    - name: Set temporary remote target path
      run: |
        echo "TARGET=${REMOTE_TARGET%/}_${GITHUB_RUN_ID}" >> $GITHUB_ENV

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

    - name: Publish
      env:
        ARGS: "-rltgoDzvO"
        SOURCE: "publish/"
      run: rsync $ARGS --rsh ssh ${SOURCE} ${REMOTE_USER}@${REMOTE_HOST}:${TARGET}

    - name: Switch Directory
      run: ssh ${REMOTE_USER}@${REMOTE_HOST} "sh ${TARGET}/deployment/online/blue_green.sh ${REMOTE_TARGET%/} ${TARGET}"
  