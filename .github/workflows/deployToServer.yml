name: Deploy

on:
  push:
    branches: [ continious_delivery ]

jobs:
  webpage-build:

    runs-on: ubuntu-latest
    env:
        PRODUCTION_BRANCH: master
        DEVELOPMENT_BRANCH: continious_delivery

    steps:
      
      #################
      # Prepare
      #################

      - uses: actions/checkout@v2
      with:
        token: ${{ secrets.CONTENTTOKEN }}
        submodules: 'true'

    - name: Validate composer.json and composer.lock
      run: composer validate
      
    - name: Cache packages
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ./kirby
          ./vendor
          ~/.npm
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
        restore-keys:
          ${{ runner.os }}-

    - name: composer install
      if: steps.cache.outputs.cache-hit != 'true'
      run: composer install --prefer-dist --no-progress --no-suggest

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test
    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12'

    - name: NPM
      #if: steps.cache.outputs.cache-hit != 'true'
      run: npm install
      #run: npm test

      #################
      # Copy
      #################

    - name: Set build build directory
      env:
        BUILD_DIR: ${{ github.repository }}_${{ github.run_number }}
      run: echo "::set-env name=BUILD_DIR::${BUILD_DIR#${{ github.repository_owner }}/}"

    - name: Copy
      run: |
        mkdir -p "${BUILD_DIR}" && \
        rsync -av --exclude-from=scripts/Linux/rsync.ignore --exclude "${BUILD_DIR}" . "${BUILD_DIR}"\
    
    - name: Extract branch id
      id: extract_branch
      run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
    
    - name: Set production path
      env:
        SECRET: ${{ secrets.DEVELOPMENT_CONNECTION }}
      if: steps.extract_branch.outputs.branch == env.PRODUCTION_BRANCH
      run: echo "::set-env name=CONNECTION::${SECRET}"

    - name: Set development path
      env:
        SECRET: ${{ secrets.DEVELOPMENT_CONNECTION }}
      if: steps.extract_branch.outputs.branch == env.DEVELOPMENT_BRANCH
      run: echo "::set-env name=CONNECTION::${SECRET}"

    - name: Publish
      env:
        SERVERKEY: ${{ secrets.SERVERKEY }}
        KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
      run: scripts/Linux/server_publish.sh "${CONNECTION}" "${BUILD_DIR}" "${SERVERKEY}" "${KNOWN_HOSTS}"
        
